{
	"info": {
		"_postman_id": "09c55c96-0897-4d2a-955c-e6dfaf393af1",
		"name": "Team7_Dietician_Phase1APIHackathon_2024 Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37338910",
		"_collection_link": "https://postman-geeks-6315.postman.co/workspace/68a54a3c-24f0-468f-a13f-3a4f28686c5b/collection/37338910-09c55c96-0897-4d2a-955c-e6dfaf393af1?action=share&source=collection_link&creator=37338910"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var AdminBearer_Token = JsonData.token;\r",
									"pm.environment.set(\"AdminBearer_Token\", AdminBearer_Token );\r",
									"\r",
									"pm.test(\"Validating Status Code\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\",\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    if(pm.response.code == 200) {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Schema Data\", function () {\r",
									"    if(pm.response.code == 200) {\r",
									"       var jsonData = pm.response.json();\r",
									"       var roles = jsonData.roles;\r",
									"       pm.expect(roles.includes(\"ROLE_ADMIN\")).to.be.true;\r",
									"       pm.expect(jsonData.type).to.eql(\"Bearer\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{user_password}}\",\r\n  \"userLoginEmail\":\"{{user_LoginEmail}}\"\r\n}\r\n\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGOUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Logout successful\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Get all Morbidities by DieticianBearer_Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									" const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityMarkerMaxVal\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									" };\r",
									"\r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    if(pm.response.code == 200) {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Morbidities by Admin_Bearer _Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityMarkerMaxVal\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									" };\r",
									"   \r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    if(pm.response.code == 200) {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Morbidity Condition By Glucose Test Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"morbidityId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"morbidityMarkerMaxVal\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"morbidityMarkerMinVal\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"morbidityNameRegex\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"morbidityTestId\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"morbidityTestName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"morbidityTestUnit\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"morbidityId\",\r",
									"      \"morbidityMarkerMaxVal\",\r",
									"      \"morbidityMarkerMinVal\",\r",
									"      \"morbidityNameRegex\",\r",
									"      \"morbidityTestId\",\r",
									"      \"morbidityTestName\",\r",
									"      \"morbidityTestUnit\"\r",
									"    ]\r",
									"  }\r",
									" };\r",
									"\r",
									"if(pm.response.code == 200) {  \r",
									"    pm.test(\"Verify JSON Schema\",function() {\r",
									"        pm.response.to.have.jsonSchema(jsonSchema); \r",
									"    });\r",
									"    \r",
									"    const morbidityName = response[0].morbidityTestName;\r",
									"    if(morbidityName === \"Fasting Glucose\") {\r",
									"        pm.test(\"Verify Morbidity Marker Value\", function () {\r",
									"            var jsonData = pm.response.json();\r",
									"            jsonData.forEach(function(object) {\r",
									"                pm.expect(object.morbidityMarkerMaxVal).to.be.above(object.morbidityMarkerMinVal);\r",
									"                pm.expect(object.morbidityTestUnit).to.eql(\"mg/dL\");\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"     \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{BaseURL}}morbidity/T3",
							"host": [
								"{{BaseURL}}morbidity"
							],
							"path": [
								"T3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Morbidity Condition By TSH Test Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityMarkerMaxVal\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									" };\r",
									"\r",
									"if(pm.response.code == 200) {  \r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify Morbidity Marker Value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(object) {\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.be.above(object.morbidityMarkerMinVal);\r",
									"        pm.expect(object.morbidityTestUnit).to.eql(\"μIU/ml\");\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.eql(4.78);\r",
									"        pm.expect(object.morbidityMarkerMinVal).to.eql(0.55);\r",
									"    });\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{BaseURL}}morbidity/TSH",
							"host": [
								"{{BaseURL}}morbidity"
							],
							"path": [
								"TSH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Morbidity Condition By T3 Test Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityMarkerMaxVal\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									" };\r",
									"\r",
									"if(pm.response.code == 200) {  \r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify Morbidity Marker Value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(object) {\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.be.above(object.morbidityMarkerMinVal);\r",
									"        pm.expect(object.morbidityTestUnit).to.eql(\"ng/dL\");\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.eql(180);\r",
									"        pm.expect(object.morbidityMarkerMinVal).to.eql(60);\r",
									"    });\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{BaseURL}}morbidity/{{morbidityName}}",
							"host": [
								"{{BaseURL}}morbidity"
							],
							"path": [
								"{{morbidityName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Morbidity Condition By T4 Test Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"const jsonSchema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"morbidityId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMaxVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityMarkerMinVal\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"morbidityNameRegex\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidityTestUnit\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"morbidityId\",\r",
									"        \"morbidityMarkerMaxVal\",\r",
									"        \"morbidityMarkerMinVal\",\r",
									"        \"morbidityNameRegex\",\r",
									"        \"morbidityTestId\",\r",
									"        \"morbidityTestName\",\r",
									"        \"morbidityTestUnit\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									" };\r",
									"\r",
									"if(pm.response.code == 200) {  \r",
									"pm.test(\"Verify JSON Schema\",function() {\r",
									"    pm.response.to.have.jsonSchema(jsonSchema); \r",
									"});\r",
									"\r",
									"pm.test(\"Verify Morbidity Marker Value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(object) {\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.be.above(object.morbidityMarkerMinVal);\r",
									"        pm.expect(object.morbidityTestUnit).to.eql(\"μg/dL\");\r",
									"        pm.expect(object.morbidityMarkerMaxVal).to.eql(12);\r",
									"        pm.expect(object.morbidityMarkerMinVal).to.eql(5);\r",
									"    });\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DieticianBearer_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "BearerToken",
								"value": "{{AdminBearer_Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{BaseURL}}morbidity/T4",
							"host": [
								"{{BaseURL}}morbidity"
							],
							"path": [
								"T4"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (typeof pm.variables.get('requestdata') !== 'object') {",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());",
					"}",
					"const requestdata = pm.variables.get('requestdata');",
					"",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {",
					"    console.log(\"No external file found\")",
					"    return;",
					"}",
					"",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];",
					"if(!currentrequest){",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);",
					"}",
					"",
					"const variables = currentrequest.data.shift();",
					"",
					"Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"pm.variables.set('requestdata',requestdata);",
					"if(currentrequest.data.length > 0){",
					"    pm.execution.setNextRequest(pm.info.requestName)",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "InvalidDietician_Id",
			"value": "711",
			"type": "string"
		}
	]
}